
import axios from 'axios';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import React, { useEffect, useRef, useState } from 'react';
import { io } from 'socket.io-client';
import useAsyncEffect from 'use-async-effect/types';
import ChatInput from '../Components/ChatInput';
import LeftNav from '../Components/LeftNav';
import MessageBox from '../Components/MessageBox';
import TopNav from '../Components/TopNav';
import Wellcome from '../Components/Wellcome';



const Home = () => {

  const socket: any = useRef()
  const router = useRouter()
  const [selectedUser, setSelectedUser] = useState<any>(undefined)
  const [currentUser, setCurrentUser] = useState<any>(undefined)
  const [messages, setMessages] = useState<any>([]);
  const [receivedMsg, setReceivedMsg] = useState<any>(null)

  //get6 logged in user data from local storage
  useEffect(() => {
    const token = localStorage.getItem('user');
    if (!token ) {
      router.push('/login')
    } else {
      const user: any = JSON.parse(token)
      // process message for send server and send it

      setCurrentUser(user)

    }

  }, [router])
  // connectio to socket




  useEffect(() => {

    if (currentUser) {
      socket.current = io('http://localhost:5000');
      socket.current.emit("add-user", currentUser._id);

    }

  }, [currentUser])

//  working space for get current chat












  // load chat data from server site

  useEffect(() => {
    if (socket.current) {

      socket.current.on('msg-recieve', (msg: any) => {
      
        console.log(msg)

        const rcvMsg: any = {
          fromSelf: false,
          message: msg
        }

        setReceivedMsg(rcvMsg)
      })

    }
  }, [socket,currentUser,selectedUser])



  // run all arival message
  useEffect(() => {
    receivedMsg && setMessages((prev: any) => [...prev, receivedMsg])

  }, [receivedMsg])



  const handleSend: React.FormEventHandler<HTMLFormElement> = async (message) => {

    const data: any = message


    socket.current.emit("send-msg", {
      to: selectedUser._id,
      from: data._id,
      msg: message
    })

    await axios.post('http://localhost:5000/addmsg', {
      from: currentUser._id,
      to: selectedUser._id,
      message: data,
    });



    // messages filter
    const msgObj = {
      fromSelf: true,
      message: data
    }
    const msg = [...messages, msgObj]
    msg.push()

    setMessages(msg)



    // get api key

  }

  // getCurrentChat

  useEffect(  () => {
    const data =  currentUser

axios.post('http://localhost:5000/getmsg', {
      from: data?._id,
      to: selectedUser?._id,
    })
    .then(res=>setMessages(res.data))
    
    // setMessages(response.data);
  }, [currentUser,selectedUser]);


  return (
    <>
      <Head >
        <title>ChatsSkoot - Realtime Chat application</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* main section */}
      <div className="main max-h-screen w-full bg-bgPrimary bg-fixed">
        <LeftNav
          setSelectedUser={setSelectedUser}
          currentUser={currentUser}
        />
        {
          !selectedUser ? <Wellcome />
            :
            <main className="main-content relative  max-h-screen w-full md:pl-[280px] lg:pl-[280px]">
              <div className="z-50 relative">
                <div className='chatContainer h-screen grid '>

                  <div className="nav text-white">

                    {/* topNav sectiopn  */}

                    <TopNav

                      selectedUser={selectedUser}
                    />

                  </div>
                  <div className="chats text-white flex flex-col-reverse px-5 overflow-y-scroll">

                    <MessageBox
                      messages={messages}
                      receivedMsg={receivedMsg}
                      socket={socket}


                    />



                  </div>

                  {/* message options */}

                  <div className="msgBox grid  content-center items-center gap-6  text-white">



                    <Image width={70} height={70} src='/images/attachment.png' alt='attachment' />



                    <ChatInput
                      handleSend={handleSend}

                    />

                  </div>




                </div>
              </div>
              <div>

              </div>
            </main>
        }
      </div>


    </>
  );
};

export default Home;